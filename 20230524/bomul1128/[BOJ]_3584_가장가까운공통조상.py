# Generated by make_my_study_record.py
# BOJ LINK : https://www.acmicpc.net/problem/3584
from sys import stdin

input = stdin.readline


def find(a, b):
    if depth[a] < depth[b]:
        a, b = b, a
    da, db = depth[a], depth[b]
    for bit in range(15):
        if (da - db) & (1 << bit):
            a = parents[a][bit]
    for bit in range(14, -1, -1):
        if parents[a][bit] != parents[b][bit]:
            a = parents[a][bit]
            b = parents[b][bit]
    if a == b:
        return a
    else:
        return parents[a][0]


for _ in range(int(input())):
    n = int(input())
    parents = [[0] * 15 for _ in range(n + 1)]
    graph = [[] for _ in range(n + 1)]
    depth = [0] * (n + 1)
    root = (n * n + n) // 2
    for _ in range(n - 1):
        x, y = map(int, input().split())
        parents[y][0] = x
        graph[x].append(y)
        root -= y
    points = [root]
    while points:
        now = points.pop()
        d = depth[now]
        for nei in graph[now]:
            depth[nei] = d + 1
            points.append(nei)
    for d in range(1, 15):
        for idx in range(1, n + 1):
            parents[idx][d] = parents[parents[idx][d - 1]][d - 1]
    x, y = map(int, input().split())
    print(find(x, y))
