# Generated by make_my_study_record.py
# BOJ LINK : https://www.acmicpc.net/problem/1799
# My submission : https://www.acmicpc.net/status?option-status-pid=on&problem_id=1799&user_id=bomul1128&language_id=-1&result_id=-1&from_problem=1
def dfs(idx, sq, cnt, flag):
    global max_black, max_white

    if idx == len(sq):
        if flag:
            max_black = max(max_black, cnt)
        else:
            max_white = max(max_white, cnt)
        return

    r, c = sq[idx]
    dfs(idx + 1, sq, cnt, flag)
    if board[r][c] == 1 and not diag_down[r + c] and not diag_up[r - c + n - 1]:
        diag_down[r + c] = True
        diag_up[r - c + n - 1] = True
        dfs(idx + 1, sq, cnt + 1, flag)
        diag_down[r + c] = False
        diag_up[r - c + n - 1] = False


n = int(input().strip())
board = [list(map(int, input().split())) for _ in range(n)]
black = []
white = []
for r in range(n):
    for c in range(n):
        target = white if (r + c) % 2 else black
        target.append((r, c))
diag_down = [False] * (2 * n)
diag_up   = [False] * (2 * n)
max_black = 0
max_white = 0
dfs(0, black, 0, True)
dfs(0, white, 0, False)
print(max_black + max_white)
