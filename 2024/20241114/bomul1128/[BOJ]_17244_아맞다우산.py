# Generated by make_my_study_record.py
# BOJ LINK : https://www.acmicpc.net/problem/17244
# My submission : https://www.acmicpc.net/status?option-status-pid=on&problem_id=17244&user_id=bomul1128&language_id=-1&result_id=-1&from_problem=1
def distance_table(r, c):
    dist = [[-1] * m for _ in range(n)]
    dist[r][c] = 0
    q = [(r, c, 0)]
    dx = [0, 0, 1, -1]
    dy = [1, -1, 0, 0]
    for x, y, d in q:
        for dr in range(4):
            nx, ny = x + dx[dr], y + dy[dr]
            if 0 <= nx < n and 0 <= ny < m and dist[nx][ny] == -1 and board[nx][ny] != '#':
                dist[nx][ny] = d + 1
                q.append((nx, ny, d + 1))
    return dist


m, n = map(int, input().split())
board = [list(input()) for _ in range(n)]
sx, sy = -1, -1
ex, ey = -1, -1
points = []
dist_map = {}
for x in range(n):
    for y in range(m):
        if board[x][y] == 'S':
            sx, sy = x, y
            dist_map[(x, y)] = distance_table(x, y)
        elif board[x][y] == 'E':
            ex, ey = x, y
            dist_map[(x, y)] = distance_table(x, y)
        elif board[x][y] == 'X':
            points.append((x, y))
            dist_map[(x, y)] = distance_table(x, y)
if not points:
    print(dist_map[(sx, sy)][ex][ey])
    exit()
bits = len(points)
dp = [[-1] * bits for _ in range(1 << bits)]
for bit in range(bits):
    dp[1 << bit][bit] = dist_map[(sx, sy)][points[bit][0]][points[bit][1]]
for mask in range(1 << bits):
    for i in range(bits):
        if dp[mask][i] == -1:
            continue
        for j in range(bits):
            if mask & (1 << j) == 0:
                ni = mask | (1 << j)
                tmp = dp[mask][i] + dist_map[points[i]][points[j][0]][points[j][1]]
                if dp[ni][j] == -1 or dp[ni][j] > tmp:  
                    dp[ni][j] = tmp
print(min(dp[-1][bit] + dist_map[points[bit]][ex][ey] for bit in range(bits)))
