# Generated by make_my_study_record.py
# BOJ LINK : https://www.acmicpc.net/problem/9370
# My submission : https://www.acmicpc.net/status?option-status-pid=on&problem_id=9370&user_id=bomul1128&language_id=-1&result_id=-1&from_problem=1
from sys import stdin
from heapq import heappush, heappop

input = stdin.readline
INF = float('inf')

def dijikstra(start):
    dist = [INF] * (n + 1)
    dist[start] = 0
    pq = [(0, start)]
    while pq:
        d, u = heappop(pq)
        if d > dist[u]:
            continue
        for v, w in graph[u]:
            if dist[v] > dist[u] + w:
                dist[v] = dist[u] + w
                heappush(pq, (dist[v], v))
    return dist


for _ in range(int(input())):
    n, m, t = map(int, input().split())
    s, g, h = map(int, input().split())
    k = 0
    graph = [[] for _ in range(n + 1)]
    for _ in range(m):
        a, b, c = map(int, input().split())
        if (a == g and b == h) or (a == h and b == g):
            k = c
        graph[a].append((b, c))
        graph[b].append((a, c))
    targets = [int(input()) for _ in range(t)]
    ans = []
    dist = dijikstra(s)
    for target in targets:
        if dist[target] == INF:
            continue
        inv_dist = dijikstra(target)
        if dist[target] == dist[g] + k + inv_dist[h] or dist[target] == dist[h] + k + inv_dist[g]:
            ans.append(target)
    print(*sorted(ans))
