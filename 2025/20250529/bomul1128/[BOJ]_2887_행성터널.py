# Generated by make_my_study_record.py
# BOJ LINK : https://www.acmicpc.net/problem/2887
# My submission : https://www.acmicpc.net/status?option-status-pid=on&problem_id=2887&user_id=bomul1128&language_id=-1&result_id=-1&from_problem=1
from sys import stdin, setrecursionlimit
from heapq import *

setrecursionlimit(10 ** 6)
input = stdin.readline


def find(idx):
    if idx == parents[idx]:
        return idx
    parents[idx] = find(parents[idx])
    return parents[idx]


n = int(input())
point = []
dist = []
for idx in range(n):
    x, y, z = map(int, input().split())
    point.append((x, y, z, idx))

point.sort()
for i in range(n - 1):
    dist.append((point[i + 1][0] - point[i][0], point[i][3], point[i + 1][3]))
point.sort(key=lambda nn: nn[1])
for j in range(n - 1):
    dist.append((point[j + 1][1] - point[j][1], point[j][3], point[j + 1][3]))
point.sort(key=lambda nn: nn[2])
for k in range(n - 1):
    dist.append((point[k + 1][2] - point[k][2], point[k][3], point[k + 1][3]))

parents = list(range(n))
heapify(dist)
edge = 0
ans = 0
while edge < n - 1:
    d, x, y = heappop(dist)
    fx = find(x)
    fy = find(y)
    if fx != fy:
        parents[fx] = fy
        ans += d
        edge += 1
print(ans)
