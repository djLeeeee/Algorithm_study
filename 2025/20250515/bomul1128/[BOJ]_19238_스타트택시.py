# Generated by make_my_study_record.py
# BOJ LINK : https://www.acmicpc.net/problem/19238
# My submission : https://www.acmicpc.net/status?option-status-pid=on&problem_id=19238&user_id=bomul1128&language_id=-1&result_id=-1&from_problem=1
from sys import stdin

input = stdin.readline


def distance(sx, sy, ex, ey):
    if (sx, sy) in dist_memo:
        return dist_memo[(sx, sy)][ex][ey]
    dist = [[-1] * n for _ in range(n)]
    dist[sx][sy] = 0
    q = [(sx, sy)]
    for x, y in q:
        for d in range(4):
            nx, ny = x + dx[d], y + dy[d]
            if 0 <= nx < n and 0 <= ny < n and dist[nx][ny] == -1 and board[nx][ny] == 0:
                dist[nx][ny] = dist[x][y] + 1
                q.append((nx, ny))
    dist_memo[(sx, sy)] = dist
    return dist[ex][ey]


n, m, fuel = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(n)]
ix, iy = map(int, input().split())
dist_memo = {}
ix -= 1
iy -= 1
arrival = {}
for _ in range(m):
    sx, sy, ex, ey = map(int, input().split())
    sx -= 1
    sy -= 1
    ex -= 1
    ey -= 1
    arrival[(sx, sy)] = (ex, ey)
dx = [-1, 0, 1, 0]
dy = [0, -1, 0, 1]
taken = 0
last_moved = 0
while taken < m:
    min_dist = float('inf')
    tx, ty = -1, -1
    for (sx, sy), (ex, ey) in arrival.items():
        d1 = distance(ix, iy, sx, sy)
        if d1 == -1:
            continue
        if min_dist > d1:
            min_dist = d1
            tx, ty = sx, sy
        elif min_dist == d1:
            if (sx, sy) < (tx, ty):
                tx, ty = sx, sy
    if fuel < min_dist:
        break
    ex, ey = arrival[(tx, ty)]
    del arrival[(tx, ty)]
    fuel -= min_dist
    d = distance(tx, ty, ex, ey)
    if d == -1 or fuel < d:
        break
    fuel += d
    ix, iy = ex, ey
    taken += 1
print(fuel if taken == m else -1)
