# Generated by make_my_study_record.py
# BOJ LINK : https://www.acmicpc.net/problem/13911
# My submission : https://www.acmicpc.net/status?option-status-pid=on&problem_id=13911&user_id=bomul1128&language_id=-1&result_id=-1&from_problem=1
from sys import stdin
from heapq import heappop, heappush

input = stdin.readline


def dijkstra(starts, n):
    dist = [-1] * (n + 1)
    hq = []
    for start in starts:
        dist[start] = 0
        hq.append((0, start))
    while hq:
        cost, idx = heappop(hq)
        if dist[idx] < cost:
            continue
        for adj, d in graph[idx]:
            if dist[adj] == -1 or dist[adj] > cost + d:
                dist[adj] = cost + d
                heappush(hq, (dist[adj], adj))
    return dist


n, m = map(int, input().split())
graph = [[] for _ in range(n + 1)]
for _ in range(m):
    x, y, d = map(int, input().split())
    graph[x].append((y, d))
    graph[y].append((x, d))
is_mc = [False] * (n + 1)
is_st = [False] * (n + 1)
_, md = map(int, input().split())
ma = list(map(int, input().split()))
_, sd = map(int, input().split())
sa = list(map(int, input().split()))
mc_dist = dijkstra(ma, n)
st_dist = dijkstra(sa, n)
ans = -1
for i in range(1, n + 1):
    if 0 < mc_dist[i] <= md and 0 < st_dist[i] <= sd:
        if ans == -1 or ans > mc_dist[i] + st_dist[i]:
            ans = mc_dist[i] + st_dist[i]
print(ans)
