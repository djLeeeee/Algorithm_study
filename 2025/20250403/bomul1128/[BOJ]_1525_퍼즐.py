# Generated by make_my_study_record.py
# BOJ LINK : https://www.acmicpc.net/problem/1525
# My submission : https://www.acmicpc.net/status?option-status-pid=on&problem_id=1525&user_id=bomul1128&language_id=-1&result_id=-1&from_problem=1
class Board:
    def __init__(self, board):
        self.board = board
        self.zx = 0
        self.zy = 0
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    self.zx = i
                    self.zy = j

    def identifier(self):
        return ''.join(''.join(map(str, row)) for row in self.board)
    
    def __eq__(self, other):
        return self.identifier() == other.identifier()
    
    def _move(self, direction=(0, 0)):
        x, y = self.zx + direction[0], self.zy + direction[1]
        if 0 <= x < 3 and 0 <= y < 3:
            new_board = [row[:] for row in self.board]
            new_board[self.zx][self.zy], new_board[x][y] = new_board[x][y], new_board[self.zx][self.zy]
            return Board(new_board)
        return None
    
    def up(self):
        return self._move((-1, 0))
    
    def down(self):
        return self._move((1, 0))
    
    def left(self):
        return self._move((0, -1))
    
    def right(self):
        return self._move((0, 1))
    
    def get_neighbors(self):
        return [move() for move in (self.up, self.down, self.left, self.right) if move() is not None]

def id_to_board(idx):
    board = []
    for i in range(3):
        row = []
        for j in range(3):
            row.append(int(idx[i * 3 + j]))
        board.append(row)
    return Board(board)

def main():
    board = [list(map(int, input().split())) for _ in range(3)]
    b = Board(board)
    init = b.identifier()
    visited = {init: 0}
    q = [init]
    goal = '123456780'
    for idx in q:
        if idx == goal:
            return visited[idx]
        for adj_board in id_to_board(idx).get_neighbors():
            if (adj := adj_board.identifier()) not in visited:
                visited[adj] = visited[idx] + 1
                q.append(adj)
    return -1


if __name__ == "__main__":
    print(main())
